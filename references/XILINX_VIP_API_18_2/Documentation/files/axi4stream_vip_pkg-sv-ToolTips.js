NDContentPage.OnToolTipsLoaded({62:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Xilinx VIP Interger unsigned data type</div></div>",63:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Xilinx VIP verbosity data type</div></div>",64:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP Interger unsigned data type</div></div>",65:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP longint unsigned data type</div></div>",67:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP data byte</div></div>",69:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP&nbsp; user beat data type</div></div>",70:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP data beat data type</div></div>",71:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP&nbsp; strobe beat data type</div></div>",73:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Policies of the transaction to inform the driver whether to return the transaction back to the issuer Depending on the policy the driver will return the transaction a different points in the life of the transaction.</div></div>",74:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Collection of policies that describe how the TREADY signals will behave. These policies can introduce backpressure into the system to find design faults. Refer PG277 section about READY Generation for more details.</div></div>",75:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Collection of policies that describe how the TREADY signals will behave when xil_axi4stream_ready_gen_policy is XIL_AXI4STREAM_READY_GEN_RANDOM. Refer PG277 section about READY Generation for more details.</div></div>",76:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">AXI4STREAM Boolean data type</div></div>",77:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">When VIF driver is in idle mode, possible signals that can be driven on VIF</div></div>",78:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">Transaction data pattern which can be all valid bytes, all null bytes, all position bytes or a combination&nbsp; of these three.</div></div>",79:"<div class=\"NDToolTip TType LSystemverilog\"><div class=\"TTSummary\">In axi4stream master driver, the time difference between the driver get the transaction and it starts to drive the data onto data bus is the delay. Depending on the delay policy, when it is XIL_AXI4STREAM_DELAY_INSERTION_FROM_IDLE,the driver can adjust the transfer delay to compensate for any backpressure observed for the prior transfer. Else it always using the delay in the transaction which the driver gets as the delay.</div></div>",80:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype80\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_void</div></div></div><div class=\"TTSummary\">The xil_void class is the base class for all Xilinx Verification Component classes.&nbsp; It is an abstract class with no data memebers or functions.</div></div>",81:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype81\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_object</div></div></div><div class=\"TTSummary\">The xil_object class is the base class for all Xilinx Verification Component data and hierarchical classes. Its primary role is to define a set of methods for common operations such as set name, verbosity, tag etc.</div></div>",96:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype96\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_reporter</div></div></div><div class=\"TTSummary\">The xil_reporter class is a class which extends from xil_object and add its own get_type_name function</div></div>",100:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype100\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_component</div></div></div><div class=\"TTSummary\">The xil_componennt class is a class which extends from xil_reporter and added its own new and get_type_name function</div></div>",104:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype104\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_agent</div></div></div><div class=\"TTSummary\">The xil_agent class is a class which extends from xil_component.</div></div>",107:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype107\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_sequence_item</div></div></div><div class=\"TTSummary\">The xil_sequence_item is a class which extends from xil_object.</div></div>",111:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype111\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_analysis_port</div></div></div><div class=\"TTSummary\">The xil_analysis_port is a parameterized class which extends from xil_component</div></div>",120:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype120\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_sqr_if_base</div></div></div><div class=\"TTSummary\">xil_sqr_if_base is a base class which provides the interfaces necessary in order to receive or send sequence items and/or other sequences. xil_sqr_if_base #(T1, T2)</div></div>",136:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype136\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_seq_item_pull_port</div></div></div><div class=\"TTSummary\">The xil_seq_item_pull_port#(REQ,RSP) class is extends from xil_sqr_if_base. It inherits all these variables and functions of xil_sqr_if_base.</div></div>",139:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype139\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_driver</div></div></div><div class=\"TTSummary\">The xil_driver#(REQ, RSP) class is parameterized class which extends from xil_component.It is the base class of all xilinx VIP\'s driver class. It has one port which is seq_item_port</div></div>",145:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype145\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_monitor</div></div></div><div class=\"TTSummary\">The xil_monitor extends from xil_component, It is the base class of all xilinx VIP\'s monitor class</div></div>",148:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype148\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_transaction</div></div></div><div class=\"TTSummary\">The axi4stream_transaction class is the base class of AXI4STREAM Verification Component.It inherits all the methods of xil_sequence_item.</div></div>",206:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype206\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_monitor_transaction</div></div></div><div class=\"TTSummary\">AXI4STREAM Monitor Transaction class.</div></div>",220:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype220\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_vif_proxy</div></div></div><div class=\"TTSummary\">AXI4STREAM VIF Proxy Class. It has virtual interface for AXI4STREAM VIP interface. Drivers of AXI4STREAM VIP drive transaction/ready onto AXI4STREAM VIP bus interface through APIs(such as&nbsp; put_transaction) of this class, monitor of AXI4STREAM VIP collects AXI4STREAM interface information and convert it into transaction through APIs(get_transaction) in this class.</div></div>",255:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype255\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_monitor</div></div></div><div class=\"TTSummary\">When active the AXI4STREAM Monitor will record transactions that are presented on the the virtual interface.</div></div>",263:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype263\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_ready_gen</div></div></div><div class=\"TTSummary\">AXI4Stream Ready generation class. Ready signal of AXI4STREAM VIP is generated independently from other attributes.&nbsp; This class is being used to generate all kinds of different patterns of ready signal which user wants. Please refer section READY Generation of PG277 for more details about how to generate ready.</div></div>",291:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype291\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_mst_driver</div></div></div><div class=\"TTSummary\">AXI4STREAM Master Driver Class. The driver receives transactions from the user environment and drives stream interface. It returns a completed transaction when the transaction is accepted when the transaction\'s driver_return_item_policy is set to XIL_AXI4STREAM_AT_ACCEPT_RETURN.</div></div>",304:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype304\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_slv_driver</div></div></div><div class=\"TTSummary\">AXI4STREAM Slave Driver Class. It receives TREADY transaction from the user enviroment and drives the TREADY signal if HAS_TREADY of the VIP is on, else TREADY is set to high all the time.</div></div>",314:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype314\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_mst_agent</div></div></div><div class=\"TTSummary\">AXI4STREAM Master Agent.&nbsp; it contains other components that comprise the entire Master Verification component.&nbsp; These are the Monitor,Driver -- refer PG277 section about AXI4-Stream Master Agent for more details.</div></div>",326:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype326\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_slv_agent</div></div></div><div class=\"TTSummary\">AXI4STREAM Slave agent. This class contains other components that comprise the entire Slave Verification component.These are the Monitor,Driver.Refer PG277 section about AXI4STREAM Slave Agent for more details.</div></div>",338:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype338\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_passthrough_agent</div></div></div><div class=\"TTSummary\">AXI4STREAM Passthrough Agent Class. The AXI4STREAM passthrough agent is comprised of other classes which are monitor,runtime master driver,&nbsp; runtime slave driver. By default, passthrough agent is in monitor mode. In order to issue transaction as master, it has to be switched to runtime master mode, in order to receive transaction, it has to be switched into runtime slave mode. Please refer PG 277 section about &quot;Useful Coding Guidelines and Examples&quot; for more details.</div></div>",409:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype409\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_object</div></div></div><div class=\"TTSummary\">The xil_object class is the base class for all Xilinx Verification Component data and hierarchical classes. Its primary role is to define a set of methods for common operations such as set name, verbosity, tag etc.</div></div>",424:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype424\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_reporter</div></div></div><div class=\"TTSummary\">The xil_reporter class is a class which extends from xil_object and add its own get_type_name function</div></div>",428:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype428\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_component</div></div></div><div class=\"TTSummary\">The xil_componennt class is a class which extends from xil_reporter and added its own new and get_type_name function</div></div>",432:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype432\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_agent</div></div></div><div class=\"TTSummary\">The xil_agent class is a class which extends from xil_component.</div></div>",435:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype435\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_sequence_item</div></div></div><div class=\"TTSummary\">The xil_sequence_item is a class which extends from xil_object.</div></div>",439:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype439\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_analysis_port</div></div></div><div class=\"TTSummary\">The xil_analysis_port is a parameterized class which extends from xil_component</div></div>",464:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype464\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_seq_item_pull_port</div></div></div><div class=\"TTSummary\">The xil_seq_item_pull_port#(REQ,RSP) class is extends from xil_sqr_if_base. It inherits all these variables and functions of xil_sqr_if_base.</div></div>",467:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype467\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_driver</div></div></div><div class=\"TTSummary\">The xil_driver#(REQ, RSP) class is parameterized class which extends from xil_component.It is the base class of all xilinx VIP\'s driver class. It has one port which is seq_item_port</div></div>",473:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype473\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_monitor</div></div></div><div class=\"TTSummary\">The xil_monitor extends from xil_component, It is the base class of all xilinx VIP\'s monitor class</div></div>",148:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype148\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_transaction</div></div></div><div class=\"TTSummary\">The axi4stream_transaction class is the base class of AXI4STREAM Verification Component.It inherits all the methods of xil_sequence_item.</div></div>",206:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype206\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_monitor_transaction</div></div></div><div class=\"TTSummary\">AXI4STREAM Monitor Transaction class.</div></div>",216:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype216\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_scoreboard_transaction</div></div></div><div class=\"TTSummary\">AXI4STREAM Scoreboard Transaction Class.</div></div>",220:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype220\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_vif_proxy</div></div></div><div class=\"TTSummary\">AXI4STREAM VIF Proxy Class. It has virtual interface for AXI4STREAM VIP interface. Drivers of AXI4STREAM VIP drive transaction/ready onto AXI4STREAM VIP bus interface through APIs(such as&nbsp; put_transaction) of this class, monitor of AXI4STREAM VIP collects AXI4STREAM interface information and convert it into transaction through APIs(get_transaction) in this class.</div></div>",255:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype255\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_monitor</div></div></div><div class=\"TTSummary\">When active the AXI4STREAM Monitor will record transactions that are presented on the the virtual interface.</div></div>",263:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype263\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_ready_gen</div></div></div><div class=\"TTSummary\">AXI4Stream Ready generation class. Ready signal of AXI4STREAM VIP is generated independently from other attributes.&nbsp; This class is being used to generate all kinds of different patterns of ready signal which user wants. Please refer section READY Generation of PG277 for more details about how to generate ready.</div></div>",291:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype291\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_mst_driver</div></div></div><div class=\"TTSummary\">AXI4STREAM Master Driver Class. The driver receives transactions from the user environment and drives stream interface. It returns a completed transaction when the transaction is accepted when the transaction\'s driver_return_item_policy is set to XIL_AXI4STREAM_AT_ACCEPT_RETURN.</div></div>",304:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype304\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_slv_driver</div></div></div><div class=\"TTSummary\">AXI4STREAM Slave Driver Class. It receives TREADY transaction from the user enviroment and drives the TREADY signal if HAS_TREADY of the VIP is on, else TREADY is set to high all the time.</div></div>",314:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype314\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_mst_agent</div></div></div><div class=\"TTSummary\">AXI4STREAM Master Agent.&nbsp; it contains other components that comprise the entire Master Verification component.&nbsp; These are the Monitor,Driver -- refer PG277 section about AXI4-Stream Master Agent for more details.</div></div>",326:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype326\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_slv_agent</div></div></div><div class=\"TTSummary\">AXI4STREAM Slave agent. This class contains other components that comprise the entire Slave Verification component.These are the Monitor,Driver.Refer PG277 section about AXI4STREAM Slave Agent for more details.</div></div>",338:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype338\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi4stream_passthrough_agent</div></div></div><div class=\"TTSummary\">AXI4STREAM Passthrough Agent Class. The AXI4STREAM passthrough agent is comprised of other classes which are monitor,runtime master driver,&nbsp; runtime slave driver. By default, passthrough agent is in monitor mode. In order to issue transaction as master, it has to be switched to runtime master mode, in order to receive transaction, it has to be switched into runtime slave mode. Please refer PG 277 section about &quot;Useful Coding Guidelines and Examples&quot; for more details.</div></div>",476:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype476\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_axi_channel_beat_base</div></div></div><div class=\"TTSummary\">XIL AXI Channel Beat Base class, single bus beat for the Write Channel.&nbsp; It inherits all the methods of xil_sequence_item</div></div>",519:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype519\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_transaction</div></div></div><div class=\"TTSummary\">The axi_transaction class is the base class of AXI protocol. It inherits all the methods of xil_sequence_item.</div></div>",747:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype747\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_ready_gen</div></div></div><div class=\"TTSummary\">AXI Ready generation class. Ready signals of write command channel, write data channel, write response channel , read command channel and read data channel are generated independently from other attributes.&nbsp; This class is being used to generate all kinds of different patterns of ready signal which user wants. Please refer section READY Generation of PG267 for more details about how to generate ready.</div></div>",774:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype774\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_vif_mem_proxy</div></div></div><div class=\"TTSummary\">AXI VIF Proxy Class. It has virtual interface for AXI VIP interface. Drivers of AXI VIP drive transaction/ready onto AXI VIP bus interface through APIs(such as&nbsp; put_w/rdata) of this class, monitor of AXI VIP collects AXI interface information and convert it into transaction through APIs(get_w/rdata) in this class.</div></div>",866:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype866\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_monitor</div></div></div><div class=\"TTSummary\">When active the AXI Monitor will record transactions that are presented on the virtual interface.It does below functions: Monitors all 5 AXI channels: AW, AR, R, W, and B.&nbsp; Collects and re-orders R Channel beats and returns a completed transaction when the RLAST is accepted Collects and re-orders B Channel response and returns a completed transaction when the B channel is accepted Transaction based protocol checking</div></div>",886:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype886\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_mst_wr_driver</div></div></div><div class=\"TTSummary\">AXI Master Write Driver class. The Driver will issue the commands on the AW channel and payload on the W channel. It will declare the transaction as complete when the B channel is acknowledge with the same ID. It has below features:</div></div>",918:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype918\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_mst_rd_driver</div></div></div><div class=\"TTSummary\">AXI Master Read Driver class.&nbsp; It receives READ transactions from the user environment and drives the AR channel</div></div>",948:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype948\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_mst_agent</div></div></div><div class=\"TTSummary\">AXI Master Agent class, it contains other components that comprise the entire Master Verification component.&nbsp; These are the Monitor, Read Driver and Write Driver -- refer PG267 section about AXI Master Agent for more details.</div></div>",980:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype980\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_slv_wr_driver</div></div></div><div class=\"TTSummary\">AXI Slave Write Driver Class.It does : Receives AW Command and the WLAST from the interface and then passes that transaction to the user environment, the user will then create a BRESP transaction and pass it back to the driver to drive the B channel.</div></div>",1020:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1020\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_slv_rd_driver</div></div></div><div class=\"TTSummary\">AXI Slave Read Driver Class. It does below: Receives AR Command from the interface and then passes that command to the user environment. The user will then create a READ transaction and pass it back to the driver to drive the R channel.</div></div>",1046:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1046\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">xil_axi_slv_mem_model</div></div></div><div class=\"TTSummary\">AXI Memory Model class. It is an associate array of Systemverilog. The write transaction can write to the memory and the read transaction can read data from the memory. These two features are implemented in the Slave VIP and Passthrough VIP in runtime slave mode. At the same time, the memory model has backdoor APIs for user to access memory directly. Please refer PG267 section about Simple SRAM Memory Model for more details.</div></div>",1072:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1072\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_slv_agent</div></div></div><div class=\"TTSummary\">AXI Slave Agent Class. This class contains other components that comprise the entire Slave Verification component.&nbsp; These are the Monitor, Read Driver and Write Driver.Refer PG267 section about AXI Slave Agent for more details.</div></div>",1098:"<div class=\"NDToolTip TClass LSystemverilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1098\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">axi_passthrough_agent</div></div></div><div class=\"TTSummary\">AXI Passthrough Agent Class.The AXI passthrough agent is comprised of other classes which are monitor, runtime master write driver, runtime master read driver, runtime slave write driver, runtime slave read driver. By default, passthrough agent is in monitor mode. In order to issue transaction as master, it has to be switched to runtime master mode, in order to receive transaction, it has to be switched into runtime slave mode. Please refer PG 267 section about &quot;Useful Coding Guidelines and Examples&quot; for more details.</div></div>"});